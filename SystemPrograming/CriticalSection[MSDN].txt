크리티컬 섹션 객체 (Critical Section Objects)

크리티컬 섹션 객체는 뮤텍스 객체와 유사한 동기화를 제공하지만, 크리티컬 섹션은 오직 단일 프로세스의 스레드에서만 사용할 수 있습니다. 크리티컬 섹션 객체는 프로세스 간에 공유할 수 없습니다.

이벤트, 뮤텍스, 세마포어 객체도 단일 프로세스 애플리케이션에서 사용할 수 있지만, 크리티컬 섹션 객체는 상호 배제 동기화에 대해 조금 더 빠르고 효율적인 메커니즘을 제공합니다 (프로세서별 테스트 및 설정 명령어). 뮤텍스 객체와 마찬가지로, 크리티컬 섹션 객체는 한 번에 하나의 스레드만 소유할 수 있습니다. 따라서 크리티컬 섹션은 공유 자원의 동시 접근을 방지하는 데 유용합니다. 그러나 뮤텍스 객체와는 달리, 크리티컬 섹션이 포기되었는지 여부를 알 수 없습니다.

Windows Server 2003 SP1부터, 크리티컬 섹션에서 대기하는 스레드는 선입선출(FIFO) 방식이 아닌 다른 방식으로 크리티컬 섹션을 획득합니다. 이 변경 사항은 대부분의 코드에서 성능을 크게 향상시킵니다. 그러나 일부 애플리케이션은 선입선출 방식에 의존하며, 이러한 애플리케이션은 최신 버전의 Windows에서 성능이 저하되거나 전혀 동작하지 않을 수 있습니다 (예: 크리티컬 섹션을 속도 제한기로 사용한 애플리케이션). 코드가 계속해서 올바르게 동작하도록 하려면 추가적인 동기화 수준을 추가해야 할 수 있습니다. 예를 들어, 생산자 스레드와 소비자 스레드가 크리티컬 섹션을 사용하여 작업을 동기화하는 경우, 각 스레드가 서로 다른 이벤트 객체를 사용하여 작업이 준비되었음을 신호로 전달하도록 만들 수 있습니다. 소비자 스레드는 생산자가 자신의 이벤트를 신호로 보내기 전까지 크리티컬 섹션에 들어가지 않으며, 생산자 스레드는 소비자가 자신의 이벤트를 신호로 보낼 때까지 크리티컬 섹션에 들어가지 않습니다. 각 스레드는 크리티컬 섹션을 벗어난 후에 자신의 이벤트를 신호로 보내어 다른 스레드를 해제합니다.

Windows Server 2003 및 Windows XP: 크리티컬 섹션에서 대기하는 스레드는 대기 큐에 추가되며, 일반적으로 큐에 추가된 순서대로 크리티컬 섹션을 획득합니다. 그러나 스레드가 이 큐에 빠르게 추가되면 각 대기 스레드를 깨우는 데 드는 시간 때문에 성능이 저하될 수 있습니다.

크리티컬 섹션에서 사용하는 메모리는 프로세스가 할당합니다. 보통은 CRITICAL_SECTION 타입의 변수를 선언하여 할당합니다. 스레드가 크리티컬 섹션을 사용하려면 InitializeCriticalSection 또는 InitializeCriticalSectionAndSpinCount 함수를 사용하여 크리티컬 섹션을 초기화해야 합니다.

스레드는 EnterCriticalSection 또는 TryEnterCriticalSection 함수를 사용하여 크리티컬 섹션의 소유권을 요청합니다. 크리티컬 섹션의 소유권을 해제하려면 LeaveCriticalSection 함수를 사용합니다. 만약 크리티컬 섹션 객체가 현재 다른 스레드에 의해 소유되고 있다면, EnterCriticalSection은 무기한 대기(waits indefinetely)합니다. 반면, 뮤텍스 객체를 사용할 때는 대기 함수가 지정된 시간 제한을 받을 수 있습니다. TryEnterCriticalSection 함수는 대기하지 않고 크리티컬 섹션을 획득하려고 시도합니다.

스레드가 크리티컬 섹션을 소유하는 동안, 추가적으로 EnterCriticalSection 또는 TryEnterCriticalSection을 호출할 수 있습니다. 이렇게 하면 스레드는 이미 소유한 크리티컬 섹션을 다시 대기하지 않고 접근할 수 있습니다. 이를 통해 스레드가 자신이 이미 소유한 크리티컬 섹션 때문에 자원을 교착 상태에 빠뜨리지 않도록 합니다. 소유권을 해제하려면 스레드는 LeaveCriticalSection을 호출해야 하며, EnterCriticalSection을 호출한 횟수만큼 호출해야 합니다. 대기 중인 스레드가 크리티컬 섹션을 획득하는 순서에 대해 보장할 수는 없습니다.

스레드는 InitializeCriticalSectionAndSpinCount 또는 SetCriticalSectionSpinCount 함수를 사용하여 크리티컬 섹션 객체의 스핀 카운트를 지정할 수 있습니다. 스핀은 스레드가 잠금된 크리티컬 섹션을 획득하려고 시도할 때, 잠금이 해제될 때까지 루프를 돌며 확인하고, 잠금이 해제되지 않으면 대기 상태로 전환되는 방식입니다. 단일 프로세서 시스템에서는 스핀 카운트가 무시되며, 크리티컬 섹션의 스핀 카운트는 0으로 설정됩니다. 멀티프로세서 시스템에서는 크리티컬 섹션을 사용할 수 없으면 호출된 스레드는 dwSpinCount 횟수만큼 스핀을 돌고, 이후 크리티컬 섹션과 관련된 세마포어에서 대기 작업을 수행합니다. 만약 크리티컬 섹션이 스핀 작업 중에 해제되면, 호출된 스레드는 대기 작업을 피할 수 있습니다.

프로세스의 모든 스레드는 DeleteCriticalSection 함수를 사용하여 크리티컬 섹션 객체를 초기화할 때 할당된 시스템 리소스를 해제할 수 있습니다. 이 함수가 호출된 후에는 크리티컬 섹션 객체를 동기화에 사용할 수 없습니다.

크리티컬 섹션 객체가 소유되면, 영향을 받는 스레드는 EnterCriticalSection으로 대기 중인 스레드들입니다. 대기하지 않는 스레드는 계속 실행될 수 있습니다.